package ogla.core.gui;

import ogla.core.Help.Chapter;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Node;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class HelpFrame extends javax.swing.JFrame {

    protected HelpContainer helps;
    protected boolean onlyHide = true;

    /** Creates new form HelpFrame */
    public HelpFrame(HelpContainer helps) {
        initComponents();
        this.helps = helps;
        jTree1.setModel(helps.getModel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Help");

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane2.setPreferredSize(new java.awt.Dimension(8, 80));

        jEditorPane1.setContentType("text/html"); // NOI18N
        jEditorPane1.setEditable(false);
        jScrollPane2.setViewportView(jEditorPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(54, 300));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Help");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setPreferredSize(new java.awt.Dimension(52, 50));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(701, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (onlyHide) {
            setVisible(false);
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        Object last = jTree1.getSelectionPath().getLastPathComponent();
        if (last == null) {
            return;
        }
        DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) last;
        Object object = treeNode.getUserObject();
        if (object instanceof HelpContainer.LabDocument) {
            HelpContainer.LabDocument labDocument = (HelpContainer.LabDocument) object;
            final String content = labDocument.document.getContent();
            jEditorPane1.setText(content);
        }
    }//GEN-LAST:event_jTree1ValueChanged

    /*private Chapter getExistedChapter(String path, Set<HelpImpl> helps) {
    for (HelpImpl help : helps) {
    if (path.equals(help.getPath())) {
    return help.getRootChapter();
    }
    }
    return null;
    }

    private HelpImpl parsePartsOfPath(String[] parts, File file, Set<HelpImpl> helps) {
    HelpImpl helpImpl = null;
    Chapter current = null;
    for (int fa = 0; fa < parts.length; fa++) {
    if (fa == 0) {
    Chapter root = getExistedChapter(parts[0], helps);
    if (root == null) {
    helpImpl = new HelpImpl();
    current = helpImpl.setRoot(parts[fa]);
    } else {
    current = root;
    }
    } else if (fa == parts.length - 1) {
    helpImpl.addDocument(parts[fa], file, current);
    } else {
    current = helpImpl.addChapter(parts[fa], current);
    }
    }
    return helpImpl;
    }
    private Set<HelpImpl> helpImpls = new HashSet<HelpImpl>();

    private void parse(String line, String pathToDirectory) {
    String[] args = line.split(",");
    String[] parts = args[1].split("/");
    File file = new File(pathToDirectory + args[0]);
    HelpImpl eHelp = parsePartsOfPath(parts, file, helpImpls);
    if (eHelp != null) {
    helpImpls.add(eHelp);
    }
    }

    private void parseNode(Node node, HelpImpl helpImpl, Chapter current, String absolutePathToDir) {
    if (node.getNodeName().equals("chapter")) {
    NamedNodeMap namedNodeMap = node.getAttributes();
    String title = namedNodeMap.getNamedItem("title").getNodeValue();
    Chapter chapter = helpImpl.addChapter(title, current);
    for (int fa = 0; fa < node.getChildNodes().getLength(); fa++) {
    parseNode(node.getChildNodes().item(fa), helpImpl, chapter, absolutePathToDir);
    }
    } else if (node.getNodeName().equals("document")) {
    NamedNodeMap namedNodeMap = node.getAttributes();
    String title = namedNodeMap.getNamedItem("title").getNodeValue();
    String path = namedNodeMap.getNamedItem("path").getNodeValue();
    File file = new File(absolutePathToDir + path);
    helpImpl.addDocument(title, file, current);
    }
    }

    private void parseXMLFile(File file) throws ParserConfigurationException, SAXException, IOException {
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    DocumentBuilder db = null;
    db = dbf.newDocumentBuilder();
    String absolutePathToDir = file.getAbsolutePath().substring(0,
    file.getAbsolutePath().length() - file.getName().length());
    Document doc = db.parse(file);
    Chapter current = null;
    HelpImpl helpImpl = null;
    NodeList dataList = doc.getElementsByTagName("chapter");
    for (int fa = 0; fa < dataList.getLength(); fa++) {
    Node node = dataList.item(fa);
    NamedNodeMap namedNodeMap = node.getAttributes();
    String title = namedNodeMap.getNamedItem("title").getNodeValue();
    Chapter chapter = getExistedChapter(title, helpImpls);
    if (chapter == null) {
    helpImpl = new HelpImpl(absolutePathToDir);
    current = helpImpl.setRoot(title);
    helpImpls.add(helpImpl);
    } else {
    current = chapter;
    }
    NodeList childsList = node.getChildNodes();
    for (int fb = 0; fb < childsList.getLength(); fb++) {
    parseNode(childsList.item(fb), helpImpl, current, absolutePathToDir);
    }
    }

    Iterator<HelpImpl> it = helpImpls.iterator();
    while (it.hasNext()) {
    HelpImpl impl = it.next();
    helps.add(impl);
    }

    }*/
    private JFileChooser jFileChooser = new JFileChooser();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
