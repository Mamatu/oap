package ogla.chart.gui;

import ogla.chart.ChartPanel;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 *
 * @author marcin
 */
public class InternalFrame extends javax.swing.JInternalFrame {

    protected ChartPanel desktopPanel = null;

    public InternalFrame(String title, ChartPanel desktopPanel, JPanel jPanel) {
        super(title);
        initComponents();
        setJPanel(jPanel);
        this.desktopPanel = desktopPanel;
        this.desktopPanel.add(this);
        this.desktopPanel.declareInternalFrameToToolBar(this);
        this.setSize(jPanel.getPreferredSize());
        this.setVisible(false);
        this.setIcon(true);
    }

    @Override
    public void setIcon(boolean b) {
        try {
            super.setIcon(b);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(ChartPanel.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("Warning - this look and feel doesn't support iconification.");
        }
    }

    @Override
    public void setClosed(boolean b) {
        super.setClosable(b);
    }

    private void setJPanel(JPanel panel) {
        this.getContentPane().setSize(panel.getPreferredSize());
        this.getContentPane().setPreferredSize(panel.getPreferredSize());
        this.setSize(panel.getPreferredSize());
        this.setPreferredSize(panel.getPreferredSize());
        this.getContentPane().add(panel);
        this.getContentPane().validate();
        this.setIcon(true);
    }
    /*
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int size = this.getContentPane().getComponentCount();
        for (int fa = 0; fa < size; fa++) {
            this.getContentPane().getComponent(fa).setSize(this.getContentPane().getSize());
        }
        this.validate();
    }//GEN-LAST:event_formComponentResized
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
