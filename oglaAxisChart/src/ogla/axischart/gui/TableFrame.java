package ogla.axischart.gui;

import ogla.core.data.DataRepository;
import ogla.core.data.DataBlock;
import java.io.File;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

public class TableFrame extends javax.swing.JFrame {

    /** Creates new form ShowDataFrame */
    public TableFrame() {
        initComponents();
        jTable1.setModel(defaultTableModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("to file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (jTable1 != null) {
            jTable1.setSize(jScrollPane1.getSize());
        }
    }//GEN-LAST:event_formComponentResized
    private JFileChooser fileChooser = new JFileChooser();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int returnVal = fileChooser.showSaveDialog(this);
            StringBuilder builder = new StringBuilder();
            fileChooser.setCurrentDirectory(new File(dataRepository.getLabel()));

            for (int fx = 0; fx < dataRepository.size(); fx++) {
                DataBlock dataBlock = dataRepository.get(fx);
                for (int fa = 0; fa < dataBlock.rows(); fa++) {

                    for (int fa1 = 0; fa1 < dataBlock.columns(); fa1++) {
                        double value = dataBlock.get(fa, fa1).getNumber().doubleValue();
                        builder.append(value);
                        if (fa1 < dataBlock.columns() - 1) {
                            builder.append(",");
                        }

                    }
                    builder.append("\n");

                }
            }
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File f = fileChooser.getSelectedFile();
                RandomAccessFile raf = new RandomAccessFile(f, "rw");
                raf.writeBytes(builder.toString());
                raf.close();
            }
        } catch (Exception ex) {
            Logger.getLogger(TableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private DefaultTableModel defaultTableModel = new DefaultTableModel();
    private DataRepository dataRepository;

    public void setDataRepository(DataRepository dataRepository) {
        this.dataRepository = dataRepository;
        int numberOfColumns = -1;
        int numberOfRows = 0;
        for (int fa = 0; fa < dataRepository.size(); fa++) {
            numberOfRows += dataRepository.get(fa).rows();
            for (int fb = 0; fb < dataRepository.get(fa).rows(); fb++) {
                if (numberOfColumns < dataRepository.get(fa).columns()) {
                    numberOfColumns = dataRepository.get(fa).columns();
                }
            }
        }

        if (numberOfColumns == -1) {
            return;
        }


        defaultTableModel.setRowCount(numberOfRows);
        defaultTableModel.setColumnCount(numberOfColumns);
        Object[] newIdentifiers = new Object[numberOfColumns];
        for (int fa = 0; fa < numberOfColumns; fa++) {
            newIdentifiers[fa] = "Column no. " + String.valueOf(fa);
        }

        defaultTableModel.setColumnIdentifiers(newIdentifiers);

        for (int fa = 0; fa < dataRepository.size(); fa++) {
            DataBlock dataBlock = dataRepository.get(fa);
            for (int fb = 0; fb < dataBlock.rows(); fb++) {
                for (int fc = 0; fc < numberOfColumns; fc++) {
                    if (fc < dataRepository.get(fa).rows()) {
                        jTable1.setValueAt(String.valueOf(dataRepository.get(fa).get(fb, fc).getNumber()),
                                fa * dataBlock.rows() + fb, fc);
                    } else {
                        jTable1.setValueAt("", fa * dataBlock.rows() + fb, fc);
                    }
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
