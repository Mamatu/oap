cmake_minimum_required(VERSION 3.17)

project(oap CXX CUDA)

set_target_properties( PROPERTIES LINKER_LANGUAGE CXX) 
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(TMP_PATH "${CMAKE_CURRENT_BINARY_DIR}/Oap" CACHE STRING "Path to temporary directory for data etc.")
set (BUILD_MODE "DEBUG" CACHE STRING "Build mode. Can be: DEBUG, RELEASE, DEBUG_SANITIZER")
set (BUILD_PART "ALL" CACHE STRING "Build specific part of s/w. In the case of ALL device and host parts will be compiled. Can be: ALL, HOST")

file(MAKE_DIRECTORY ${TMP_PATH}/tests_data)
file(MAKE_DIRECTORY ${TMP_PATH}/conversion_data)
file(MAKE_DIRECTORY ${TMP_PATH}/host_tests)
file(MAKE_DIRECTORY ${TMP_PATH}/host_tests/OapPngFileTests_PrintLetters)
file(MAKE_DIRECTORY ${TMP_PATH}/device_tests)

if("${BUILD_MODE}" STREQUAL "DEBUG")
  set(CMAKE_CXX_FLAGS "-g3")
elseif("${BUILD_MODE}" STREQUAL "RELEASE")
  set(CMAKE_CXX_FLAGS "-O2")
elseif("${BUILD_MODE}" STREQUAL "DEBUG_SANITIZER")
  set(CMAKE_CXX_FLAGS "-g3 -fsanitize=address -fno-omit-frame-pointer")
else()
  message(FATAL_ERROR "This kind of BUILD_MODE is not supported")
endif()

if(NOT("${BUILD_PART}" STREQUAL "ALL" OR "${BUILD_PART}" STREQUAL "HOST"))
  message(FATAL_ERROR "This kind of BUILD_PART is not supported")
endif()

file(GLOB gmock_source $ENV{OAP_GMOCK_PATH}/src/gmock-all.cc)
file(GLOB gtest_source $ENV{OAP_GTEST_PATH}/src/gtest-all.cc $ENV{OAP_GTEST_PATH}/src/gtest_main.cc)

add_library(gmock SHARED ${gmock_source})
add_library(gtest SHARED ${gtest_source})

target_include_directories(gmock PUBLIC $ENV{OAP_GMOCK_PATH}/include $ENV{OAP_GMOCK_PATH} $ENV{OAP_GTEST_PATH}/include)
target_include_directories(gtest PUBLIC $ENV{OAP_GTEST_PATH}/include $ENV{OAP_GTEST_PATH})

target_link_libraries(gmock PUBLIC -lpthread)
target_link_libraries(gtest PUBLIC -lpthread)

list(APPEND LIBS oapMath)
list(APPEND LIBS oapMatrix)
list(APPEND LIBS oapUtils)
list(APPEND LIBS oapAppUtils)
list(APPEND LIBS oapCuda)
list(APPEND LIBS oapMatrixCpu)
list(APPEND LIBS oapMemory)
list(APPEND LIBS oapNeuralHost)
list(APPEND LIBS oapNeuralDevice)
list(APPEND LIBS oapNeuralRoutines)
list(APPEND LIBS oapNeuralRoutinesHost)
list(APPEND LIBS ArnoldiPackage)
list(APPEND LIBS oapMatrixCuda)
list(APPEND LIBS oap2dt3dDevice)

list(APPEND EXECS oap2dt3d)
list(APPEND EXECS oapNeuralApps)
list(APPEND EXECS oapNeural)
list(APPEND EXECS oapAppUtilsFuncTests)
list(APPEND EXECS oapAppUtilsTests)
list(APPEND EXECS oapArnoldiHostTests)
list(APPEND EXECS oapHostTests)
list(APPEND EXECS oapNeuralRoutinesHostTests)
list(APPEND EXECS oap2dt3dDeviceTests)
list(APPEND EXECS oapArnoldiDeviceTests)
list(APPEND EXECS oapDeviceTests)
list(APPEND EXECS oapNeuralDeviceTests)

foreach(lib IN LISTS LIBS)
  include_directories (${lib})
  link_directories (build/${lib})
endforeach()

foreach(lib IN LISTS EXECS)
  include_directories (${lib})
endforeach()

include_directories (oapTests)
include_directories (oapTestsData)
include_directories (oapQRTestSamples)
include_directories (oapCMatrixDataTests)
include_directories (oapDeviceTestsData)

if("${BUILD_PART}" STREQUAL "ALL")
  include_directories ($ENV{OAP_CUDA_PATH}/include)
endif()

add_definitions (-DDEBUG -DOAP_PATH=/home/mmatula/oap -DTMP_PATH=/tmp/Oap -DOAP_CONFIG_NI_EF -DLOG_LEVEL=DEBUG_LEVEL)

foreach(lib IN LISTS LIBS)
  add_subdirectory (${lib})
endforeach()
foreach(exec IN LISTS EXECS)
  add_subdirectory (${exec})
endforeach()
